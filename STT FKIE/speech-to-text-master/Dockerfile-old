FROM ubuntu:22.04
#FROM python:3-alpine

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    software-properties-common \
    wget \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    curl \
    libncurses5-dev \
    libncursesw5-dev \
    libgdbm-dev \
    libdb5.3-dev \
    libexpat1-dev \
    xz-utils \
    tk-dev \
    libxml2-dev \
    libxmlsec1-dev \
    libffi-dev \
    liblzma-dev \
    libxmlsec1-dev \
    git \
    ca-certificates \
    gnupg2 \
    libglvnd-dev \
    pkg-config

# Install Python 3.11
RUN wget https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz && \
    tar -xf Python-3.11.0.tgz && \
    cd Python-3.11.0 && \
    ./configure --enable-optimizations && \
    make -j$(nproc) && \
    make altinstall && \
    cd .. && rm -rf Python-3.11.0 Python-3.11.0.tgz

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.11 1

# Download the get-pip.py script && Install pip for Python 3.11
RUN wget https://bootstrap.pypa.io/get-pip.py
RUN python3 get-pip.py

# Verify pip installation
RUN update-alternatives --install /usr/bin/pip3 pip3 /usr/local/bin/pip3.11 1


# install other general requirements
#RUN apt install unzip

### requirements for whisper
# Install cuda
# Add NVIDIA CUDA Repository GPG key and repository
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin && \
    mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get update
# Install NVIDIA Driver (e.g., 535 version) explicitly
RUN apt-get install -y nvidia-driver-535 && \
    apt-get clean
# Install CUDA Toolkit (Latest Available Version)
RUN apt-get install -y cuda-toolkit-12-2 && \
    apt-get clean
# Set environment variables for CUDA
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}

# Install ffmpeg
RUN apt-get install -y ffmpeg
RUN apt-get install -y portaudio19-dev #needed for pyaudio

# cleanup
RUN apt-get clean


RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

COPY requirements.txt /usr/src/app/

RUN pip3 install --no-cache-dir -r requirements.txt

# if issues with cuda and pytorch occur install the CPU-only version of pytorch
RUN pip3 uninstall -y torch torchvision torchaudio
RUN pip3 install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu


# TODO see point 4 in 'whisper installation.txt'
# locate the file and change the paths #TODO check
ENV SITE_PACKAGE_PATH="/usr/local/lib/python3.11/site-packages"
ENV OPENAI_PUBLIC_FILE="${SITE_PACKAGE_PATH}/tiktoken_ext/openai_public.py"

ENV BASE_URL_TO_REPLACE="https://openaipublic.blob.core.windows.net"
ENV GPT2_URL_TO_REPLACE="${BASE_URL_TO_REPLACE}/gpt-2/encodings/main"
ENV ENCODINGS_URL_TO_REPLACE="${BASE_URL_TO_REPLACE}/encodings"

ENV BASE_LOCAL_PATH="/usr/src/app/speech_to_text"
ENV GPT2_LOCAL_PATH="${BASE_LOCAL_PATH}/models/whisper_english_base"
ENV ENCODINGS_LOCAL_PATH="${BASE_LOCAL_PATH}/encodings"

RUN sed -i "s|${GPT2_URL_TO_REPLACE}|${GPT2_LOCAL_PATH}|g" ${OPENAI_PUBLIC_FILE}
RUN sed -i "s|${ENCODINGS_URL_TO_REPLACE}|${ENCODINGS_LOCAL_PATH}|g" ${OPENAI_PUBLIC_FILE}

#copy the code files
COPY . /usr/src/app

EXPOSE 8081

ENTRYPOINT ["python3"]

CMD ["-m", "openapi_server"]