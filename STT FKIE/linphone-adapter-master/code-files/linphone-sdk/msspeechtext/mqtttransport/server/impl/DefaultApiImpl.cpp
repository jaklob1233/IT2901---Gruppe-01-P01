/**
* MqttTransport
* This is an API for a MQTT-Transport component.
*
* The version of the OpenAPI document: 0.1.0
* Contact: norman.jansen@fkie.fraunhofer.de
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "mediastreamer2/mscommon.h"
#include "DefaultApiImpl.h"
#include "../include/mqtttransport/MessageBuffer.h"

namespace org::openapitools::mqtttransport::server::api {

using namespace org::openapitools::mqtttransport::server::model;

DefaultApiImpl::DefaultApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : DefaultApi(rtr)
{
}

void DefaultApiImpl::initialize(const std::optional<std::string> &mqttVariant, const std::optional<std::string> &configProfile, const std::optional<std::string> &baseTopic, const std::optional<std::string> &nodeId, const std::optional<std::string> &webhookUrl, const std::optional<std::string> &mqttServerIp, const std::optional<int32_t> &mqttServerPort, Pistache::Http::ResponseWriter &response) {
    ms_message("mqtttransport-initialize - Do not use - is a dummy function");
    response.send(Pistache::Http::Code::Ok);
}
void DefaultApiImpl::on_new_message_post(const Message &message, Pistache::Http::ResponseWriter &response) {
    ms_message("mqtttransport-on_new_message_post, timestamp=%ld, message=%s", message.getTimestamp(), message.getMessage().c_str());

    // put message in buffer
    org::openapitools::mqtttransport::server::api::mqtt_message msg = {
            message.getSenderId(),
            message.getReceiverId(),
            message.getMessageId(),
            message.getMessage(),
            message.getTimestamp()
    };
    MessageBuffer::getInstance().add_message(msg);

    response.send(Pistache::Http::Code::Ok);
}
void DefaultApiImpl::send_message(const std::optional<std::string> &source, const std::optional<std::string> &destination, const Message &message, Pistache::Http::ResponseWriter &response) {
    ms_message("mqtttransport-send_message: Do not use - is a dummy function");
    response.send(Pistache::Http::Code::Ok);
}
}
