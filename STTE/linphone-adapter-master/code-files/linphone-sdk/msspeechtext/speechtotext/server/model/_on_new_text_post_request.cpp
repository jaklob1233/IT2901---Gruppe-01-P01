/**
* SpeechToText
* This is an API for a Speech-to-Text component.
*
* The version of the OpenAPI document: 0.1.0
* Contact: norman.jansen@fkie.fraunhofer.de
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "_on_new_text_post_request.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::speechtotext::server::model
{

_on_new_text_post_request::_on_new_text_post_request()
{
    m_Timestamp_start = 0;
    m_Timestamp_startIsSet = false;
    m_Timestamp_end = 0;
    m_Timestamp_endIsSet = false;
    m_Text = "";
    m_TextIsSet = false;
    
}

void _on_new_text_post_request::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::speechtotext::server::helpers::ValidationException(msg.str());
    }
}

bool _on_new_text_post_request::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool _on_new_text_post_request::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "_on_new_text_post_request" : pathPrefix;

                
    return success;
}

bool _on_new_text_post_request::operator==(const _on_new_text_post_request& rhs) const
{
    return
    
    
    
    ((!timestampStartIsSet() && !rhs.timestampStartIsSet()) || (timestampStartIsSet() && rhs.timestampStartIsSet() && getTimestampStart() == rhs.getTimestampStart())) &&
    
    
    ((!timestampEndIsSet() && !rhs.timestampEndIsSet()) || (timestampEndIsSet() && rhs.timestampEndIsSet() && getTimestampEnd() == rhs.getTimestampEnd())) &&
    
    
    ((!textIsSet() && !rhs.textIsSet()) || (textIsSet() && rhs.textIsSet() && getText() == rhs.getText()))
    
    ;
}

bool _on_new_text_post_request::operator!=(const _on_new_text_post_request& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _on_new_text_post_request& o)
{
    j = nlohmann::json::object();
    if(o.timestampStartIsSet())
        j["timestamp_start"] = o.m_Timestamp_start;
    if(o.timestampEndIsSet())
        j["timestamp_end"] = o.m_Timestamp_end;
    if(o.textIsSet())
        j["text"] = o.m_Text;
    
}

void from_json(const nlohmann::json& j, _on_new_text_post_request& o)
{
    if(j.find("timestamp_start") != j.end())
    {
        j.at("timestamp_start").get_to(o.m_Timestamp_start);
        o.m_Timestamp_startIsSet = true;
    } 
    if(j.find("timestamp_end") != j.end())
    {
        j.at("timestamp_end").get_to(o.m_Timestamp_end);
        o.m_Timestamp_endIsSet = true;
    } 
    if(j.find("text") != j.end())
    {
        j.at("text").get_to(o.m_Text);
        o.m_TextIsSet = true;
    } 
    
}

int64_t _on_new_text_post_request::getTimestampStart() const
{
    return m_Timestamp_start;
}
void _on_new_text_post_request::setTimestampStart(int32_t const value)
{
    m_Timestamp_start = value;
    m_Timestamp_startIsSet = true;
}
bool _on_new_text_post_request::timestampStartIsSet() const
{
    return m_Timestamp_startIsSet;
}
void _on_new_text_post_request::unsetTimestamp_start()
{
    m_Timestamp_startIsSet = false;
}
int64_t _on_new_text_post_request::getTimestampEnd() const
{
    return m_Timestamp_end;
}
void _on_new_text_post_request::setTimestampEnd(int32_t const value)
{
    m_Timestamp_end = value;
    m_Timestamp_endIsSet = true;
}
bool _on_new_text_post_request::timestampEndIsSet() const
{
    return m_Timestamp_endIsSet;
}
void _on_new_text_post_request::unsetTimestamp_end()
{
    m_Timestamp_endIsSet = false;
}
std::string _on_new_text_post_request::getText() const
{
    return m_Text;
}
void _on_new_text_post_request::setText(std::string const& value)
{
    m_Text = value;
    m_TextIsSet = true;
}
bool _on_new_text_post_request::textIsSet() const
{
    return m_TextIsSet;
}
void _on_new_text_post_request::unsetText()
{
    m_TextIsSet = false;
}


} // namespace org::openapitools::speechtotext::server::model

