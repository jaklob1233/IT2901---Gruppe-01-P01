/**
* MqttTransport
* This is an API for a MQTT-Transport component.
*
* The version of the OpenAPI document: 0.1.0
* Contact: norman.jansen@fkie.fraunhofer.de
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Message.h
 *
 * 
 */

#ifndef Message_H_
#define Message_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::mqtttransport::server::model
{

/// <summary>
/// 
/// </summary>
class  Message
{
public:
    Message();
    virtual ~Message() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Message& rhs) const;
    bool operator!=(const Message& rhs) const;

    /////////////////////////////////////////////
    /// Message members

    /// <summary>
    /// 
    /// </summary>
    std::string getSenderId() const;
    void setSenderId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getReceiverId() const;
    void setReceiverId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getMessageId() const;
    void setMessageId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getTimestamp() const;
    void setTimestamp(int64_t const value);

    friend  void to_json(nlohmann::json& j, const Message& o);
    friend  void from_json(const nlohmann::json& j, Message& o);
protected:
    std::string m_Sender_id;

    std::string m_Receiver_id;

    std::string m_Message_id;

    std::string m_Message;

    int64_t m_Timestamp;

    
};

} // namespace org::openapitools::server::model

#endif /* Message_H_ */
