/**
* MqttTransport
* This is an API for a MQTT-Transport component.
*
* The version of the OpenAPI document: 0.1.0
* Contact: norman.jansen@fkie.fraunhofer.de
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Message.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::mqtttransport::server::model
{

Message::Message()
{
    m_Sender_id = "";
    m_Receiver_id = "";
    m_Message_id = "";
    m_Message = "";
    m_Timestamp = 0L;
    
}

void Message::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::mqtttransport::server::helpers::ValidationException(msg.str());
    }
}

bool Message::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Message::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Message" : pathPrefix;

                        
    return success;
}

bool Message::operator==(const Message& rhs) const
{
    return
    
    
    (getSenderId() == rhs.getSenderId())
     &&
    
    (getReceiverId() == rhs.getReceiverId())
     &&
    
    (getMessageId() == rhs.getMessageId())
     &&
    
    (getMessage() == rhs.getMessage())
     &&
    
    (getTimestamp() == rhs.getTimestamp())
    
    
    ;
}

bool Message::operator!=(const Message& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Message& o)
{
    j = nlohmann::json::object();
    j["sender_id"] = o.m_Sender_id;
    j["receiver_id"] = o.m_Receiver_id;
    j["message_id"] = o.m_Message_id;
    j["message"] = o.m_Message;
    j["timestamp"] = o.m_Timestamp;
    
}

void from_json(const nlohmann::json& j, Message& o)
{
    j.at("sender_id").get_to(o.m_Sender_id);
    j.at("receiver_id").get_to(o.m_Receiver_id);
    j.at("message_id").get_to(o.m_Message_id);
    j.at("message").get_to(o.m_Message);
    j.at("timestamp").get_to(o.m_Timestamp);
    
}

std::string Message::getSenderId() const
{
    return m_Sender_id;
}
void Message::setSenderId(std::string const& value)
{
    m_Sender_id = value;
}
std::string Message::getReceiverId() const
{
    return m_Receiver_id;
}
void Message::setReceiverId(std::string const& value)
{
    m_Receiver_id = value;
}
std::string Message::getMessageId() const
{
    return m_Message_id;
}
void Message::setMessageId(std::string const& value)
{
    m_Message_id = value;
}
std::string Message::getMessage() const
{
    return m_Message;
}
void Message::setMessage(std::string const& value)
{
    m_Message = value;
}
int64_t Message::getTimestamp() const
{
    return m_Timestamp;
}
void Message::setTimestamp(int64_t const value)
{
    m_Timestamp = value;
}


} // namespace org::openapitools::server::model

