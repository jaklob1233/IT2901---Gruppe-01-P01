/**
* MqttTransport
* This is an API for a MQTT-Transport component.
*
* The version of the OpenAPI document: 0.1.0
* Contact: norman.jansen@fkie.fraunhofer.de
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "DefaultApi.h"
#include "../model/Helpers.h"

namespace org::openapitools::mqtttransport::server::api
{

using namespace org::openapitools::mqtttransport::server::helpers;
using namespace org::openapitools::mqtttransport::server::model;

const std::string DefaultApi::base = "/mqtttransport";

DefaultApi::DefaultApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void DefaultApi::init() {
    setupRoutes();
}

void DefaultApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Put(*router, base + "/initialize", Routes::bind(&DefaultApi::initialize_handler, this));
    Routes::Post(*router, base + "/on_new_message", Routes::bind(&DefaultApi::on_new_message_post_handler, this));
    Routes::Post(*router, base + "/send_message", Routes::bind(&DefaultApi::send_message_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&DefaultApi::default_api_default_handler, this));
}

void DefaultApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> DefaultApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::mqtttransport::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void DefaultApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> DefaultApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void DefaultApi::initialize_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto mqttVariantQuery = request.query().get("mqtt_variant");
    std::optional<std::string> mqttVariant;
    if(mqttVariantQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(mqttVariantQuery.value(), valueQuery_instance)){
            mqttVariant = valueQuery_instance;
        }
    }
    auto configProfileQuery = request.query().get("config_profile");
    std::optional<std::string> configProfile;
    if(configProfileQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(configProfileQuery.value(), valueQuery_instance)){
            configProfile = valueQuery_instance;
        }
    }
    auto baseTopicQuery = request.query().get("base_topic");
    std::optional<std::string> baseTopic;
    if(baseTopicQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(baseTopicQuery.value(), valueQuery_instance)){
            baseTopic = valueQuery_instance;
        }
    }
    auto mqttServerIpQuery = request.query().get("mqtt_server_ip");
    std::optional<std::string> mqttServerIp;
    if(mqttServerIpQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(mqttServerIpQuery.value(), valueQuery_instance)){
            mqttServerIp = valueQuery_instance;
        }
    }
    auto mqttServerPortQuery = request.query().get("mqtt_server_port");
    std::optional<int32_t> mqttServerPort;
    if(mqttServerPortQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(mqttServerPortQuery.value(), valueQuery_instance)){
            mqttServerPort = valueQuery_instance;
        }
    }
    auto nodeIdQuery = request.query().get("node_id");
    std::optional<std::string> nodeId;
    if(nodeIdQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(nodeIdQuery.value(), valueQuery_instance)){
            nodeId = valueQuery_instance;
        }
    }
    auto webhookUrlQuery = request.query().get("webhook_url");
    std::optional<std::string> webhookUrl;
    if(webhookUrlQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(webhookUrlQuery.value(), valueQuery_instance)){
            webhookUrl = valueQuery_instance;
        }
    }
    
    try {
        this->initialize(mqttVariant, configProfile, baseTopic, nodeId, webhookUrl, mqttServerIp, mqttServerPort, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::on_new_message_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    Message message;
    
    try {
        nlohmann::json::parse(request.body()).get_to(message);
        message.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->on_new_message_post(message, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::send_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    Message message;
    
    // Getting the query params
    auto sourceQuery = request.query().get("source");
    std::optional<std::string> source;
    if(sourceQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(sourceQuery.value(), valueQuery_instance)){
            source = valueQuery_instance;
        }
    }
    auto destinationQuery = request.query().get("destination");
    std::optional<std::string> destination;
    if(destinationQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(destinationQuery.value(), valueQuery_instance)){
            destination = valueQuery_instance;
        }
    }
    
    try {
        nlohmann::json::parse(request.body()).get_to(message);
        message.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->send_message(source, destination, message, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void DefaultApi::default_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

